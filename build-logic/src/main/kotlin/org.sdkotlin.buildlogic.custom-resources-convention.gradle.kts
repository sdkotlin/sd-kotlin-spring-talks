import org.sdkotlin.buildlogic.attributes.ResourceAttributes.CUSTOM_RESOURCE
import org.sdkotlin.buildlogic.attributes.ResourceAttributes.RESOURCE_ATTRIBUTE
import org.sdkotlin.buildlogic.attributes.ResourceAttributes.applyResourceAttributes

dependencies {
	attributesSchema {
		// Register a new attribute key for variant-aware consumption
		// of custom resource dependencies
		attribute(RESOURCE_ATTRIBUTE)
	}
}

@Suppress("UnstableApiUsage")
configurations {

	// Create dependency scope for projects with custom resources artifacts
	val customScope = dependencyScope("customScope")

	// Create variant-aware resolvable configuration for custom resources
	// artifacts
	resolvable("customClasspath") {
		extendsFrom(customScope.get())
		attributes {
			applyResourceAttributes(objects, CUSTOM_RESOURCE)
		}
	}

	// Create variant-aware consumable configuration for custom resources
	// artifacts
	consumable("customElements") {
		extendsFrom(customScope.get())
		attributes {
			applyResourceAttributes(objects, CUSTOM_RESOURCE)
		}
	}
}

artifacts {

	// Any files in "src/main/custom" are custom resources
	val customResourceDirectory: Directory =
		project.layout.projectDirectory.dir("src/main/custom")

	//  No build step is necessary, so directly add the directory as an
	//  artifact to the variant-aware consumable configuration
	add("customElements", customResourceDirectory)
}

tasks {

	// The variant-aware custom resources resolvable configuration.
	val customClasspath by configurations.existing

	withType<JavaExec>().configureEach {

		// For the `JavaExec` tasks created by the Gradle Application Plugin,
		// the Spring Boot Gradle Plugin, or generated by IntelliJ...
		if (name in listOf("run", "bootRun", "bootTestRun") ||
			name.endsWith("main()")) {

			// Add the custom resources to the runtime classpath
			classpath = classpath.plus(customClasspath.get())
		}
	}

	withType<Test>().configureEach {

		// Add the custom resources to the classpath for all `Test` tasks
		classpath = classpath.plus(customClasspath.get())
	}
}
